#labels Phase-Design
= Overview =

System logger performs logging of system events such as various errors, connection attempts and failures etc. It has nothing with group-chat / private-chat logging, though it may be used for logging system xmpp messages (e.g. error auth messages). 

System log can be configured through [BotConfig system configuration] 

System logs are stored inside local database (SQLite). Log records life time depends on several options:

 * *Store system log for specified number of sessions.*

 When bot is launched, we assume that new session is started. User can specify number of sessions to be logged in system configuration.

 * *Store system log records for specified time period*

 If bot is running permanently, user can specify interval of storing system logs. If log record will be older then logging interval it will be cleaned up automatically.

 * *Store only specified ammount of system log records*

 Only latest records will be present in system log. Total count of them is specified in system configuration _Link needed_

 * *Combination of all methods*

 System log cleans up old records and stores logs for only specified number of sessions. Additionally only specified number of system log records will be stored.

= Use-case =

http://jxmpp-bot.googlecode.com/svn/trunk/jxmpp-bot/wiki_images/Syslog%20Use-Case.png

= Data model =

http://jxmpp-bot.googlecode.com/svn/trunk/jxmpp-bot/wiki_images/Syslog%20database.png

= Implementation =

Syslog is active object. In predefined intervals (through system configuration) it initiates log cleaning activity. Interval mustn't be too small due to performance issues.
By default log cleaning interval is 10 minutes. This means that each 10 minutes syslog checks if there are any _old_ log messages which should be cleaned from database and memory (if they are cached)

Syslog makes decision whether the record is old or not by the use of _selected strategy of cleaning_. 

During initialization syslog caches multiple database tables into memory:

 # syslog_cathegories
 # sessions
 # syslog_types
 # syslog_senders

Those are "primitives" which will be uses very often in the process of construction of new log messages, so we need to cache them in memory. Also we need a fast thread-safe method which will return current session.

Typically we will use such a process of construction of log message (_*Listing 1*_):

{{{
 Session currentSession = Syslog.getCurrentSession();

 SysLogMessageCathegory cath = new SysLogMessageCathegory("new cathegory");
 SysLogMessageType tp = new SysLogMessageType("new type");
 SysLogSender sndr = new SysLogSender("bot");
 
 SysLogMessage msg = new SysLogMessage("this is new message", currentSession, cath, tp, sndr);
  
 Syslog.putMessage(msg);
}}}




We can use more user-friendly syntax (_*Listing 2*_):

{{{
 SysLogMessage msg = new SysLogMessage("this is next message. 
     current session will be assigned to it automatically", "test cathegory", "test type", "test sender");
 
 Syslog.putMessage(msg);
}}}

In second example session information will be assigned to message automatically (current session will be used) by Syslog. Syslog also will take care of all database routines about creating and caching new cathegory, sender, type. Or if they are already present in database Syslog will retrieve them from cache by text name and assign to LogMessage.




= List of reserved syslog cathegories =

_in progress_

= List of reserved syslog types =

_in progress_

= List of reserved syslog senders =

_in progress_